<?php

namespace JSDataTables\Service;

use JS\Test\JSTestCase;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-04-24 at 18:39:14.
 */
class ListClauseTest extends JSTestCase {

    /**
     * @var ListClause
     */
    protected $object;
    private $ajaxParams = [
        'draw' => '1',
        'start' => '0',
        'length' => '125',
        'search' => [
            'value' => 'value teste global',
            'regex' => 'false'
        ],
        'columns' => [
            [
                'data' => 'data_teste1',
                'name' => '',
                'searchable' => 'true',
                'orderable' => 'true',
                'search' => [
                    'value' => 'value teste1',
                    'regex' => 'false'
                ]
            ],
            [
                'data' => 'data_teste2',
                'name' => '',
                'searchable' => 'true',
                'orderable' => 'true',
                'search' => [
                    'value' => 'value teste2',
                    'regex' => 'false'
                ]
            ]
        ],
        'order' => [
            [
                'column' => '1',
                'dir' => 'asc'
            ]
        ]
    ];
    private $dtConfig = [
        'primary_key' => [
            'name' => 'teste',
            'alias' => 'a'
        ],
        'alias_default' => '',
        'class_name' => '',
        'columns' => [
            [
                'data' => 'data_teste1',
                'name' => 'data teste 1',
                'width' => '20%',
                'orderable' => true,
                'searchable' => true,
                'server' => [
                    'field' => [
                        'name' => 'data_teste1',
                        'alias' => 'a'
                    ],
                    /* 'filters' => [
                      [
                      'name' => '',
                      'options' => ''
                      ]
                      ], */
                    'separator' => '~',
                ]
            ],
            [
                'data' => 'data_teste2',
                'name' => 'data teste 2',
                'width' => '20%',
                'orderable' => true,
                'searchable' => true,
                'server' => [
                    'field' => [
                        'name' => 'data_teste2',
                        'alias' => 'a',
                        'partial' => true
                    ],
                    'filters' => [
                        [
                            'name' => 'StringTrim',
                        ]
                    ],
                ]
            ],
        ],
    ];

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        parent::setUp();
        $this->object = $this->getServiceManager()->get('ListClause');
        $dtConfig = new \JSDataTables\Entity\ConfigDt();
        $this->dtConfig = $dtConfig->hydrate($this->dtConfig);
        $ajaxParams = new \JSDataTables\Entity\AjaxParams();
        $this->ajaxParams = $ajaxParams->hydrate($this->ajaxParams);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        parent::tearDown();
    }

    /**
     * @covers JSDataTables\Service\ListClause::createList
     */
    public function testCreateList() {
        $this->object->setQuery($this->getEntityManager()->createQueryBuilder());
        $this->object->createList($this->dtConfig, $this->ajaxParams);
        $this->assertArrayHasKey('data_teste1', $this->object->getClauses());
        $this->assertArrayHasKey('data_teste2', $this->object->getClauses());
        $this->assertCount(1, $this->object->getClauses()['data_teste1']);
        $this->assertCount(2, $this->object->getClauses()['data_teste2']);
        $this->object->removeClause('data_teste1');
        $this->object->removeClause('data_teste2');

        $this->object->setQuery($this->getServiceManager()->get('PDOManager')->createPDOQuery());
        $this->object->createList($this->dtConfig, $this->ajaxParams);
        $this->assertArrayHasKey('data_teste1', $this->object->getClauses());
        $this->assertArrayHasKey('data_teste2', $this->object->getClauses());
        $this->assertCount(1, $this->object->getClauses()['data_teste1']);
        $this->assertCount(2, $this->object->getClauses()['data_teste2']);
    }

    /**
     * @covers JSDataTables\Service\ListClause::generateWhere
     */
    public function testGenerateWhereQueryBuilder() {
        $this->object->setQuery($this->getEntityManager()->createQueryBuilder());
        $this->object->createList($this->dtConfig, $this->ajaxParams);
        $this->object->generateWhere();
        $this->assertCount(2, $this->object->getQuery()->getDQLPart('where')->getParts());
    }

    /**
     * @covers JSDataTables\Service\ListClause::addClause
     */
    public function testAddClause() {
        $this->object->setQuery($this->getEntityManager()->createQueryBuilder());
        $this->object->addClause('data_teste1', $this->object->getQuery()->expr()->like('teste', ":teste"), ['teste' => 'teste valor']);
        $this->object->setQuery($this->getServiceManager()->get('PDOManager')->createPDOQuery());
        $this->object->addClause('data_teste1', "teste LIKE :teste", ['teste' => 'teste valor']);
        $this->assertInstanceOf('Doctrine\ORM\Query\Expr\Comparison', $this->object->getClauses()['data_teste1'][0]['clause']);
        $this->assertEquals("teste LIKE :teste", $this->object->getClauses()['data_teste1'][1]['clause']);
    }

    /**
     * @covers JSDataTables\Service\ListClause::removeClause
     */
    public function testRemoveClause() {
        $this->object->setQuery($this->getEntityManager()->createQueryBuilder());
        $this->object->addClause('data_teste1', $this->object->getQuery()->expr()->like('teste', ":teste"), ['teste' => 'teste valor']);
        $this->object->setQuery($this->getServiceManager()->get('PDOManager')->createPDOQuery());
        $this->object->addClause('data_teste1', "teste LIKE :teste", ['teste' => 'teste valor']);
        $this->object->removeClause('data_teste1');
        $this->assertCount(0, $this->object->getClauses());
    }

}
