<?php

namespace JSDataTables\Filter;

use JS\Test\JSTestCase;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-04-15 at 04:53:04.
 */
class AjaxFilterTest extends JSTestCase {

    /**
     * @var AjaxFilter
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        [
            'datatables' => [
                'columns' => [
                    [
                        'data' => 'nome',
                        'name' => 'Talvez nome',
                        'width' => '20%',
                        'orderable' => false,
                        'searchable' => true,
                        'server' => [
                            'field' => [
                                'name' => 'nome',
                                'alias' => 'a',
                                'partial' => true
                            ],
                            'filters' => [
                                [
                                    'name' => '',
                                    'options' => ''
                                ]
                            ],
                            'separator' => '~',
                        ]
                    ],
                    [
                        'data' => 'clinica_nome',
                        'name' => 'Clinica Nome',
                        'width' => '20%',
                        'orderable' => false,
                        'searchable' => true,
                        'server' => [
                            'nome' => 'a'
                        ]
                    ]
                ],
            ]
        ];
        parent::setUp();
        $this->object = new AjaxFilter();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        parent::tearDown();
    }

    public function dataInvalidProvider() {
        return array(
            array('draw', array(null, 'a')),
            array('start', array(null, 'a')),
            array('length', array(null, 'a')),
        );
    }

    /**
     * @dataProvider dataInvalidProvider
     */
    public function testIfIsInvalid($input, $values) {
        foreach ($values as $value) {
            $this->object->get($input)->setValue($value);
            $this->assertFalse($this->object->get($input)->isValid());
        }
    }

    public function testIfIsValid() {
        $valid1 = [
            'draw' => '1',
            'start' => '0',
            'length' => '125',
            'search' => [
                'value' => 'value teste global',
                'regex' => 'false'
            ],
            'columns' => [
                [
                    'data' => 'data_teste',
                    'name' => '',
                    'searchable' => 'true',
                    'orderable' => 'true',
                    'search' => [
                        'value' => 'value teste',
                        'regex' => 'false'
                    ]
                ]
            ],
            'order' => [
                [
                    'column' => '1',
                    'dir' => 'asc'
                ]
            ]
        ];
        $this->object->setData($valid1);
        $result = $this->object->isValid();
        $this->assertTrue($this->object->isValid());
    }

}
